{
    "components": {
        "schemas": {
            "Address": {
                "type": "object",
                "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats)",
                "properties": {
                    "use": {
                        "type": "string",
                        "enum": [
                            "home",
                            "work",
                            "temp",
                            "old",
                            "billing"
                        ],
                        "description": "Purpose of this address"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "postal",
                            "pyshical",
                            "both"
                        ],
                        "description": "Type of this address"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text representation of the address"
                    },
                    "line": {
                        "type": "array",
                        "description": "Street name, number, direction & P.O. Box etc.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "city": {
                        "type": "string",
                        "description": "Name of city, town etc."
                    },
                    "district": {
                        "type": "string",
                        "description": "District name (aka county)"
                    },
                    "state": {
                        "type": "string",
                        "description": "Sub-unit of country (abbreviations ok)"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "Postal code for area"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country (e.g. can be ISO 3166 2 or 3 letter code)"
                    },
                    "period": {
                        "comment": "Time period when address was/is in use",
                        "$ref": "#/components/schemas/Period"
                    }
                }
            },
            "Period": {
                "description": "Time range defined by start and end date/time",
                "type": "object",
                "properties": {
                    "start": {
                        "comment": "Starting time with inclusive boundary",
                        "$ref": "#/components/schemas/dateTime"
                    },
                    "end": {
                        "comment": "End time with inclusive boundary, if not ongoing",
                        "$ref": "#/components/schemas/dateTime"
                    }
                },
                "required": [
                    "start",
                    "end"
                ]
            },
            "dateTime": {
                "type": "string",
                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "Ratio": {
                "type": "object",
                "description": "A ratio of two Quantity values - a numerator and a denominator",
                "properties": {
                    "numerator": {
                        "$ref": "#/components/schemas/Quantity",
                        "comment": "Numerator value"
                    },
                    "denominator": {
                        "$ref": "#/components/schemas/Quantity",
                        "comment": "Denominator value"
                    }
                }
            },
            "Quantity": {
                "type": "object",
                "description": "A measured or measurable amount <br> + Rule: If a code for the unit is present, the system SHALL also be present",
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "description": "Numerical value (with implicit precision)"
                    },
                    "comparator": {
                        "type": "string",
                        "description": "how to understand the value",
                        "enum": [
                            "<",
                            "<=",
                            ">=",
                            ">"
                        ]
                    },
                    "unit": {
                        "type": "string",
                        "description": "Unit representation"
                    },
                    "system": {
                        "type": "string",
                        "description": "System that defines coded unit form"
                    },
                    "code": {
                        "type": "string",
                        "description": "Coded form of the unit"
                    }
                },
                "required": [
                    "comparator"
                ]
            },
            "Attachment": {
                "description": "Content in a format defined elsewhere <br> + Rule: If the Attachment has data, it SHALL have a contentType",
                "type": "object",
                "properties": {
                    "contentType": {
                        "type": "string",
                        "description": "Mime type of the content, with charset etc."
                    },
                    "language": {
                        "type": "string",
                        "description": "Human language of the content (BCP-47)"
                    },
                    "data": {
                        "type": "string",
                        "description": "Data inline, base64ed"
                    },
                    "url": {
                        "description": "Uri where the data can be found",
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of bytes of content (if url provided)"
                    },
                    "hash": {
                        "type": "string",
                        "description": "Hash of the data (sha-1, base64ed)"
                    },
                    "title": {
                        "type": "string",
                        "description": "Label to display in place of the data"
                    },
                    "creation": {
                        "$ref": "#/components/schemas/dateTime",
                        "comment": "Date attachment was first created"
                    }
                },
                "required": [
                    "contentType"
                ]
            },
            "Identifier": {
                "type": "object",
                "description": "An identifier intended for computation",
                "properties": {
                    "use": {
                        "type": "string",
                        "enum": [
                            "usual",
                            "official",
                            "temp",
                            "secondary",
                            "old"
                        ],
                        "description": " identifier use (if known)"
                    },
                    "type": {
                        "type": "string",
                        "description": "type code as found on http://hl7.org/fhir/terminologies-valuesets.html"
                    },
                    "system": {
                        "type": "string",
                        "description": "The namespace for the identifier value"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value that is unique"
                    },
                    "period": {
                        "comment": "Time period when id is/was valid for use",
                        "$ref": "#/components/schemas/Period"
                    },
                    "assigner": {
                        "type": "string",
                        "description": "Organization that issued id (may be just text)"
                    }
                },
                "required": [
                    "use"
                ]
            },
            "Annotation": {
                "type": "object",
                "description": "Text node with attribution",
                "properties": {
                    "author": {
                        "description": "Individual responsible for the annotation (reference or name)",
                        "type": "string"
                    },
                    "time": {
                        "$ref": "#/components/schemas/dateTime",
                        "comment": "When the annotation was made"
                    },
                    "text": {
                        "type": "string",
                        "pattern": "\\s*(\\S|\\s)*",
                        "description": "The annotation - text content (as markdown)"
                    }
                },
                "required": [
                    "text"
                ]
            },
            "Money": {
                "type": "object",
                "description": "An amount of economic utility in some recognized currency",
                "properties": {
                    "currency": {
                        "description": "ISO 4217 Currency Code",
                        "type": "string"
                    },
                    "value": {
                        "description": "Numerical value (with implicit precision)",
                        "type": "number"
                    }
                },
                "required": [
                    "currency"
                ]
            },
            "Timing": {
                "description": "A timing schedule that specifies an event that may occur multiple times",
                "type": "object",
                "properties": {
                    "event": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/dateTime"
                        }
                    },
                    "repeat": {
                        "type": "object",
                        "properties": {
                            "bounds[x]": {
                                "description": "Length/Range of lengths, or (Start and/or end) limits",
                                "oneOf": [
                                    {
                                        "type": "number",
                                        "description": "How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration."
                                    },
                                    {
                                        "$ref": "#/components/schemas/Range"
                                    },
                                    {
                                        "$ref": "#/components/schemas/Period"
                                    }
                                ]
                            },
                            "count": {
                                "type": "integer",
                                "description": "Number of times to repeat"
                            },
                            "countMax": {
                                "type": "integer",
                                "description": "Maximum number of times to repeat"
                            },
                            "Duration": {
                                "type": "number",
                                "description": "How long when it happens"
                            },
                            "durationMax": {
                                "type": "number",
                                "description": "How long when it happens (Max)"
                            },
                            "durationUnit": {
                                "type": "string",
                                "enum": [
                                    "s",
                                    "min",
                                    "h",
                                    "d",
                                    "wk",
                                    "mo",
                                    "a"
                                ],
                                "description": "unit of time (UCUM)"
                            },
                            "frequency": {
                                "type": "integer",
                                "description": "Event occurs frequency times per period"
                            },
                            "frequencyMax": {
                                "type": "integer",
                                "description": "Event occurs up to frequencyMax times per period"
                            },
                            "period": {
                                "type": "number",
                                "description": "Event occurs frequency times per period"
                            },
                            "periodMax": {
                                "type": "number",
                                "description": "Upper limit of period (3-4 hours)"
                            },
                            "periodUnit": {
                                "type": "string",
                                "enum": [
                                    "s",
                                    "min",
                                    "h",
                                    "d",
                                    "wk",
                                    "mo",
                                    "a"
                                ],
                                "description": "unit of time (UCUM)"
                            },
                            "dayOfWeek": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "mon",
                                        "tue",
                                        "wed",
                                        "thu",
                                        "fri",
                                        "sat",
                                        "sun"
                                    ]
                                }
                            },
                            "timeOfDay": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                    "description": "Time of day for action"
                                }
                            },
                            "when": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "Code for time period of occurrence as on http://hl7.org/fhir/valueset-event-timing.html"
                                }
                            },
                            "offset": {
                                "type": "integer",
                                "description": "Minutes from event (before or after)"
                            }
                        },
                        "required": [
                            "dayOfWeek",
                            "when"
                        ],
                        "description": "A timing schedule that specifies an event that may occur multiple times (time unit for period or duration required when used)"
                    },
                    "code": {
                        "type": "string",
                        "description": "Timing Abbreviation as found on http://hl7.org/fhir/terminologies-valuesets.html"
                    }
                }
            },
            "Age": {
                "type": "string",
                "description": "age as found on http://hl7.org/fhir/valueset-age-units.html"
            },
            "Distance": {
                "type": "string",
                "description": "Distance as found on http://hl7.org/fhir/valueset-all-distance-units.html"
            },
            "Count": {
                "type": "integer"
            },
            "SampledData": {
                "type": "object",
                "description": "A series of measurements taken by a device",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "Decimal values with spaces, or \"E\" | \"U\" | \"L\""
                    },
                    "dimensions": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of sample points at each time point"
                    },
                    "upperLimit": {
                        "type": "number",
                        "description": "Upper limit of detection"
                    },
                    "lowerLimit": {
                        "type": "number",
                        "description": "Lower limit of detection"
                    },
                    "factor": {
                        "type": "number",
                        "description": "Multiply data by this before adding to origin"
                    },
                    "period": {
                        "type": "number",
                        "description": "Number of milliseconds between samples"
                    },
                    "origin": {
                        "$ref": "#/components/schemas/Quantity",
                        "comment": "Zero value and units"
                    }
                },
                "required": [
                    "dimensions",
                    "origin",
                    "period"
                ]
            },
            "SimpleQuantity": {
                "$ref": "#/components/schemas/Quantity"
            },
            "instant": {
                "type": "string",
                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))"
            },
            "Signature": {
                "description": "A Signature - XML DigSig, JWS, Graphical image of signature, etc.",
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The actual signature content (XML DigSig. JWS, picture, etc.) (base64 binary)"
                    },
                    "sigFormat": {
                        "type": "string",
                        "description": "The technical format of the signature (mimetype)"
                    },
                    "targetFormat": {
                        "type": "string",
                        "description": "The technical format of the signed resources"
                    },
                    "type": {
                        "description": "Indication of the reason the entity signed the object(s) as per http://hl7.org/fhir/valueset-signature-type.html",
                        "type": "string"
                    },
                    "when": {
                        "$ref": "#/components/schemas/instant",
                        "comment": "When the signature was created"
                    },
                    "who": {
                        "type": "string",
                        "description": "Who signed- Reference(Practitioner | PractitionerRole | RelatedPerson | Patient | Device | Organization)"
                    },
                    "onBehalfOf": {
                        "type": "string",
                        "description": "The party represented - Reference(Practitioner | PractitionerRole | RelatedPerson | Patient | Device | Organization)"
                    }
                },
                "required": [
                    "who",
                    "when",
                    "type",
                    "targetFormat",
                    "sigFormat"
                ]
            },
            "ContactPoint": {
                "description": "Details of a Technology mediated contact point (phone, fax, email, etc.)",
                "type": "object",
                "properties": {
                    "system": {
                        "type": "string",
                        "enum": [
                            "phone",
                            "fax",
                            "email",
                            "pager",
                            "url",
                            "sms",
                            "other"
                        ],
                        "description": "Type of contactmethod"
                    },
                    "value": {
                        "description": "The actual contact point details",
                        "type": "string"
                    },
                    "use": {
                        "enum": [
                            "home",
                            "work",
                            "temp",
                            "old",
                            "mobile"
                        ],
                        "description": "purpose of this contact point",
                        "type": "string"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "Specify preferred order of use (1 = highest)"
                    },
                    "period": {
                        "$ref": "#/components/schemas/Period"
                    }
                },
                "required": [
                    "use",
                    "system",
                    "value"
                ]
            },
            "ContactDetail": {
                "description": "The ContactDetail structure defines general contact details.",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of an individual to contact"
                    },
                    "telecom": {
                        "$ref": "#/components/schemas/ContactPoint"
                    }
                }
            },
            "HumanName": {
                "description": "Name of a human - parts and usage",
                "type": "object",
                "properties": {
                    "use": {
                        "description": "NameUse",
                        "type": "string",
                        "enum": [
                            "usual",
                            "official",
                            "temp",
                            "nickname",
                            "anonymous",
                            "old",
                            "maiden"
                        ]
                    },
                    "text": {
                        "type": "string",
                        "description": "Text representation of the full name"
                    },
                    "family": {
                        "type": "string",
                        "description": "Family name often called surname"
                    },
                    "given": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "Given names (not always 'first'). Includes middle names<br>This repeating element order: Given Names appear in the correct order for presenting the name"
                        }
                    },
                    "prefix": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "Parts that come before the name<br>This repeating element order: Prefixes appear in the correct order for presenting the name"
                        }
                    },
                    "sufix": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "Parts that come after the name<br>This repeating element order: Suffixes appear in the correct order for presenting the name"
                        }
                    },
                    "period": {
                        "$ref": "#/components/schemas/Period"
                    }
                },
                "required": [
                    "use"
                ]
            },
            "Range": {
                "type": "object",
                "description": "Set of values bounded by low and high",
                "properties": {
                    "low": {
                        "$ref": "#/components/schemas/SimpleQuantity",
                        "comment": "Low limit"
                    },
                    "high": {
                        "$ref": "#/components/schemas/SimpleQuantity",
                        "comment": "High limit"
                    }
                }
            },
            "Reference": {
                "type": "object",
                "properties": {
                    "reference": {
                        "type": "string",
                        "description": "refrence to resource for example: Patient/{id}"
                    }
                },
                "required": [
                    "reference"
                ]
            },
            "RelatedArtifact": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "documentation','justification",
                            "citation",
                            "predecessor",
                            "successor','derived-from",
                            "depends-on",
                            "composed-of"
                        ]
                    },
                    "label": {
                        "description": "Short label",
                        "type": "string"
                    },
                    "display": {
                        "type": "string",
                        "description": "Brief description of the related artifact"
                    },
                    "citation": {
                        "type": "string",
                        "pattern": "\\s*(\\S|\\s)*",
                        "description": "Bibliographic citation for the artifact (markdown)"
                    },
                    "url": {
                        "description": "Where the artifact can be accessed (URL)",
                        "type": "string"
                    },
                    "document": {
                        "$ref": "#/components/schemas/Attachment",
                        "description": "What document is being referenced"
                    },
                    "resource": {
                        "type": "string",
                        "description": "What resource is being referenced (Canonical URL)"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "Meta": {
                "type": "object",
                "properties": {
                    "versionId": {
                        "type": "string",
                        "format": "[A-Za-z0-9\\-\\.]{1,64}",
                        "description": "Version specific identifier"
                    },
                    "lastUpdated": {
                        "$ref": "#/components/schemas/instant"
                    },
                    "source": {
                        "type": "string",
                        "description": "Identifies where the resource comes from"
                    },
                    "profile": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "Profiles this resource claims to conform to canonical(StructureDefinition)"
                        }
                    },
                    "security": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "Security Labels applied to this resource as per https://hl7.org/fhir/valueset-security-labels.html"
                        }
                    },
                    "tag": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "tags as per https://hl7.org/fhir/valueset-common-tags.html"
                        }
                    }
                }
            },
            "Contributor": {
                "description": "Contributor information",
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "author",
                            "editor",
                            "reviewer",
                            "endorser"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Who contributed the content"
                    },
                    "contact": {
                        "description": "Contact details of the contributor",
                        "type": "array",
                        "items": {
                            "type": {
                                "$ref": "#/components/schemas/ContactDetail"
                            }
                        }
                    }
                },
                "required": [
                    "type"
                ]
            },
            "DataRequirement": {
                "type": "object",
                "description": "The DataRequirement structure defines a general data requirement for a knowledge asset such as a decision support rule or quality measure.",
                "properties": {
                    "type": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "The type of the required data"
                    },
                    "profile": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The profile of the required data"
                    },
                    "subjectCodeableConcept": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": ""
                    },
                    "subjectReference": {
                        "$ref": "#/components/schemas/Group",
                        "description": ""
                    },
                    "mustSupport": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates specific structure elements that are referenced by the knowledge module"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of results"
                    },
                    "codeFilter": {
                        "description": "What codes are expected",
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "A code-valued attribute to filter on"
                            },
                            "searchParam": {
                                "type": "string",
                                "description": "A coded (token) parameter to search on"
                            },
                            "valueSet": {
                                "type": "string",
                                "description": "Valueset for the filter (canonical)"
                            },
                            "code": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "[^s]+(s[^s]+)*"
                                },
                                "description": "What code is expected"
                            }
                        }
                    },
                    "dateFilter": {
                        "description": "What dates/date ranges are expected",
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "A date-valued attribute to filter on"
                            },
                            "searchParam": {
                                "type": "string",
                                "description": "A date valued parameter to search on"
                            },
                            "valueDateTime": {
                                "$ref": "#/components/schemas/dateTime",
                                "description": ""
                            },
                            "valuePeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": ""
                            },
                            "valueDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": ""
                            }
                        }
                    },
                    "sort": {
                        "description": "Order of the results",
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "The name of the attribute to perform the sort"
                            },
                            "direction": {
                                "type": "string",
                                "format": "[^s]+(s[^s]+)*",
                                "description": "ascending | descending"
                            }
                        },
                        "required": [
                            "path",
                            "direction"
                        ]
                    }
                }
            },
            "Expression": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Natural language description of the condition"
                    },
                    "name": {
                        "description": "Short name assigned to expression for reuse",
                        "type": "string",
                        "format": "[A-Za-z0-9\\-\\.]{1,64}"
                    },
                    "language": {
                        "type": "string",
                        "description": "language file type as per https://hl7.org/fhir/valueset-expression-language.html"
                    },
                    "expression": {
                        "type": "string",
                        "description": "Expression in specified language"
                    },
                    "reference": {
                        "type": "string",
                        "description": "Where the expression is found (URI)"
                    }
                },
                "required": [
                    "language"
                ]
            },
            "Coding": {
                "type": "object",
                "properties": {
                    "system": {
                        "type": "string",
                        "description": "Identity of the terminology system"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the system - if relevant"
                    },
                    "code": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "Symbol in syntax defined by the system"
                    },
                    "display": {
                        "type": "string",
                        "description": "Representation defined by the system"
                    },
                    "userSelected": {
                        "type": "boolean",
                        "description": "If this coding was chosen directly by the user"
                    }
                }
            },
            "CodeableConcept": {
                "type": "object",
                "properties": {
                    "coding": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "[^s]+(s[^s]+)*"
                        },
                        "description": "Code defined by a terminology system"
                    },
                    "text": {
                        "type": "string",
                        "description": "Plain text representation of the concept"
                    }
                }
            },
            "Dosage": {
                "type": "object",
                "properties": {
                    "sequence": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The order of the dosage instructions"
                    },
                    "text": {
                        "type": "string",
                        "description": "Free text dosage instructions e.g. SIG"
                    },
                    "additionalInstruction": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "[^s]+(s[^s]+)*"
                        },
                        "description": "Supplemental instruction or warnings to the patient - e.g. \"with meals\", \"may cause drowsiness\""
                    },
                    "patientInstruction": {
                        "type": "string",
                        "description": "Patient or consumer oriented instructions"
                    },
                    "timing": {
                        "$ref": "#/components/schemas/Timing",
                        "description": "When medication should be administered"
                    },
                    "asNeededBoolean": {
                        "type": "boolean",
                        "description": ""
                    },
                    "asNeededCodeableConcept": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "as per https://hl7.org/fhir/valueset-medication-as-needed-reason.html"
                    },
                    "site": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "Body site to administer to"
                    },
                    "route": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "How drug should enter body"
                    },
                    "method": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "Technique for administering medication"
                    },
                    "doseAndRate": {
                        "$ref": "#/components/schemas/doseAndRate",
                        "description": "Amount of medication administered"
                    },
                    "maxDosePerPeriod": {
                        "$ref": "#/components/schemas/Ratio",
                        "description": "Upper limit on medication per unit of time"
                    },
                    "maxDosePerAdministration": {
                        "$ref": "#/components/schemas/SimpleQuantity",
                        "description": "Upper limit on medication per administration"
                    },
                    "maxDosePerLifetime": {
                        "$ref": "#/components/schemas/SimpleQuantity",
                        "description": "Upper limit on medication per lifetime of the patient"
                    }
                }
            },
            "doseAndRate": {
                "description": "Amount of medication administered",
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "The kind of dose or rate specified"
                    },
                    "doseRange": {
                        "$ref": "#/components/schemas/Range",
                        "description": ""
                    },
                    "doseQuantity": {
                        "$ref": "#/components/schemas/SimpleQuantity",
                        "description": ""
                    },
                    "rateRatio": {
                        "$ref": "#/components/schemas/Ratio",
                        "description": ""
                    },
                    "rateRange": {
                        "$ref": "#/components/schemas/Range",
                        "description": ""
                    },
                    "rateQuantity": {
                        "$ref": "#/components/schemas/SimpleQuantity",
                        "description": ""
                    }
                }
            },
            "UsageContext": {
                "description": "The UsageContext structure defines the context of use for a module. requires one of the valuetypes",
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "Type of context being specified"
                    },
                    "valueCodeableConcept": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": ""
                    },
                    "valueQuantity": {
                        "$ref": "#/components/schemas/Quantity",
                        "description": ""
                    },
                    "valueRange": {
                        "$ref": "#/components/schemas/Range",
                        "description": ""
                    },
                    "valueReference": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "reference": {
                                            "type": "string",
                                            "description": "Literal reference, Relative, internal or absolute URL example: PlanDefinition/{id}"
                                        }
                                    },
                                    "required": [
                                        "reference"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "reference": {
                                            "type": "string",
                                            "description": "Literal reference, Relative, internal or absolute URL example: ResearchStudy/{id}"
                                        }
                                    },
                                    "required": [
                                        "reference"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "reference": {
                                            "type": "string",
                                            "description": "Literal reference, Relative, internal or absolute URL example: InsurancePlan/{id}"
                                        }
                                    },
                                    "required": [
                                        "reference"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "reference": {
                                            "type": "string",
                                            "description": "Literal reference, Relative, internal or absolute URL example: Organization/{id}"
                                        }
                                    },
                                    "required": [
                                        "reference"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "reference": {
                                            "type": "string",
                                            "description": "Literal reference, Relative, internal or absolute URL example: Location/{id}"
                                        }
                                    },
                                    "required": [
                                        "reference"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "reference": {
                                            "type": "string",
                                            "description": "Literal reference, Relative, internal or absolute URL example: Group/{id}"
                                        }
                                    },
                                    "required": [
                                        "reference"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "reference": {
                                            "type": "string",
                                            "description": "Literal reference, Relative, internal or absolute URL example: HealthcareService/{id}"
                                        }
                                    },
                                    "required": [
                                        "reference"
                                    ]
                                }
                            ]
                        }
                    }
                }
            },
            "TriggerDefinition": {
                "description": "Defines an expected trigger for a module, Either timing, or a data requirement, but not both, A condition only if there is a data requirement, A named event requires a name, a periodic event requires timing, and a data event requires data",
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "named-event | periodic | data-changed | data-added | data-modified | data-removed | data-accessed | data-access-ended"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name or URI that identifies the event"
                    },
                    "timingTiming": {
                        "$ref": "#/components/schemas/Timing",
                        "description": ""
                    },
                    "timingReference": {
                        "$ref": "#/components/schemas/Schedule"
                    },
                    "timingDate": {
                        "type": "string",
                        "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                        "description": ""
                    },
                    "timingDateTime": {
                        "$ref": "#/components/schemas/dateTime",
                        "description": ""
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataRequirement"
                        },
                        "description": "Triggering data of the event (multiple = 'and')"
                    },
                    "condition": {
                        "$ref": "#/components/schemas/Expression",
                        "description": "Whether the event triggers (boolean expression)"
                    }
                }
            },
            "ParameterDefinition": {
                "description": "Definition of a parameter to a module",
                "required": [
                    "type",
                    "use"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "Name used to access the parameter value"
                    },
                    "use": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "in | out"
                    },
                    "min": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Minimum cardinality"
                    },
                    "max": {
                        "type": "string",
                        "description": "Maximum cardinality (a number of *)"
                    },
                    "documentation": {
                        "type": "string",
                        "description": "A brief description of the parameter"
                    },
                    "type": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "What type of value"
                    },
                    "profile": {
                        "type": "string",
                        "description": "What profile the value is expected to be"
                    }
                }
            },
            "Narrative": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "generated | extensions | additional | empty"
                    },
                    "div": {
                        "type": "string",
                        "description": "Limited xhtml content"
                    }
                }
            },
            "XHTML": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "generated | extensions | additional | empty"
                    },
                    "div": {
                        "type": "string",
                        "description": "Limited xhtml content"
                    }
                },
                "required": [
                    "status",
                    "div"
                ]
            },
            "Group": {
                "type": "object",
                "description": "Group of multiple entities",
                "required": [
                    "type",
                    "actual"
                ],
                "properties": {
                    "identifier": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Identifier"
                        },
                        "description": "Unique ids"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether this group's record is in active use"
                    },
                    "type": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "group type as per http://hl7.org/fhir/2021May/valueset-group-type.html"
                    },
                    "actual": {
                        "type": "boolean",
                        "description": "Descriptive or actual"
                    },
                    "code": {
                        "type": "string",
                        "format": "[^s]+(s[^s]+)*",
                        "description": "Kind of Group members"
                    },
                    "name": {
                        "type": "string",
                        "description": "Label for Group"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of members"
                    },
                    "managingEntity": {
                        "description": "Entity that is the custodian of the Group's definition",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Organization"
                            },
                            {
                                "$ref": "#/components/schemas/Practitioner"
                            },
                            {
                                "$ref": "#/components/schemas/PractitionerRole"
                            },
                            {
                                "$ref": "#/components/schemas/RelatedPerson"
                            }
                        ]
                    },
                    "characteristic": {
                        "description": "Include / Exclude group members by Trait | must include one of the 5 value types",
                        "required": [
                            "code",
                            "exclude"
                        ],
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "format": "[^s]+(s[^s]+)*",
                                "description": "Kind of characteristic"
                            },
                            "valueCodeableConcept": {
                                "type": "string",
                                "format": "[^s]+(s[^s]+)*",
                                "description": ""
                            },
                            "valueBoolean": {
                                "type": "boolean",
                                "description": ""
                            },
                            "valueQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": ""
                            },
                            "valueRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": ""
                            },
                            "valueReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": ""
                            },
                            "exclude": {
                                "type": "boolean",
                                "description": "Group includes or excludes"
                            },
                            "period": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Period over which characteristic is tested"
                            }
                        }
                    },
                    "member": {
                        "description": "Who or what is in group",
                        "required": [
                            "entity"
                        ],
                        "type": "object",
                        "properties": {
                            "entity": {
                                "description": "Reference to the group member",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/Device"
                                    },
                                    {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    {
                                        "$ref": "#/components/schemas/Medication"
                                    },
                                    {
                                        "$ref": "#/components/schemas/Patient"
                                    },
                                    {
                                        "$ref": "#/components/schemas/Practitioner"
                                    },
                                    {
                                        "$ref": "#/components/schemas/PractitionerRole"
                                    },
                                    {
                                        "$ref": "#/components/schemas/Substance"
                                    }
                                ]
                            },
                            "period": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Period member belonged to the group"
                            },
                            "inactive": {
                                "type": "boolean",
                                "description": "If member is no longer in group"
                            }
                        }
                    }
                }
            }
        }
    },
    "info": {
        "title": "Sample Pet Store App",
        "description": "This is a sample server for a pet store.",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.1"
    },
    "openapi": "3.0.0",
    "paths": {
        "/test": {
            "get": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated"
                    }
                }
            }
        }
    }
}